%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Hugo) ()%%Title: (firma_fac_ingenieria.eps)%%CreationDate: 10/29/07 11:23 PM%%BoundingBox: 74 341 540 448%%HiResBoundingBox: 74.0972 341.4727 539.3037 447.8164%%DocumentProcessColors: Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 26.5 16 585.5 799%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -354 793 1.2 1589 965 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 32 8%%BeginData: 5532 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD0FFFA8A8FD057DA8A8FD3DFFA8FD36FF7D27F827%2751517C515127272752FFFF52A852FFFFFF7DA8FD0AFF7DA8FFA87DFD05%FF52FFFFFF7D7DFD12FF7D532752285252522752527DA8FFFFFFA8A8FD04%FFA8FD0BFFA8FFA8A8FD0AFFA8FD0BFF7DF87CA5CCFE7C7BCCFECC7B2727%FFA8527D52A87DA8A87DFD05A8FFA87DA8A87D7DFF527DA87DFFFF5252FF%FFA85252FF7DFD0FFF522727527DA87DA8A8A85252F82EFFFF27A852FFFF%FFA87DFD0AFF7DA8FF7D52FD04FFA852FFFFFF7D7DFD0BFF5227C6FEC6FE%2751C6FEC6FE2727FFFF27A8525227525353287D52522759277D27A8FD05%52A8F87D525227FFA8522759525252FD0EFF53F8A8FFFFFF5227FD04FF27%F8FFA8527D527D52527D52FD047D527D535952527D7D7D27527D527DA852%52FFFF7D5252A8527DFD08FF7DF8CCFECCC75227CCFECCFE5227FFA852A8%5252A8527D7D7D277D277D7D52FF7D7D7D527D7E7D7D525252A852FFA852%A852527DA8FD0EFF5227A8FFFFFF5252FD04FF2727FFFF27A85252535252%7DFD05527D27FF52A87D7D527D52A8275252A852FFA8527D7D525252FD08%FF5227A4FEC6A551517BFEC6FE2727FFFF275252527D52527D7D27FF5252%A827A85252527DFD0452277D7D5252FFFF52277D52527DFD0EFF7DF8A8FF%FFA85227A8FFFFFF5227FFAF275252527D2752527DF8A8277D7D52A87D27%7DFD0452275252527D52FFFF527D525252A8FD08FF7DF8CCFEFE7B7C517C%FECCFE5127FFFFFFA8FFA8FFA8FFFFFFA8FFFFA8A8FFFFA8A8FFFFFF7DFF%A8A8FFFFA8FFFFFFA8A8FFFF84FD0FFF5227A8FFFFFF527D53FFFFFF2727%FFFF7D527D7DA87D7DA8A87DFFA852A87DFF597D7DA8A8527D7D52A8A87D%7DFFFFA852A8A87D7EFD08FF5226A4FEC6A57B7C51FEC6FE2727CAFF7DFD%0DFFA87DFD0AFFA8A8FD17FF7DF8A8FFFF7E7D5352FFFFFF5227FD11FFA8%FD1DFF7DF8CCFECC7BA67B52FECCFE5127FFFF277DFD0CFF7DF8A8FD09FF%7D27FD17FF5327A8FFFFA87DA852FFFFFF2727FFFF27A8FD0CFF7D27A8FD%09FF7D52FD11FF5227A4FEC69F9FA527CCC6FE2727CFFFF884FF7D52A8FF%FF7D84FD04FF272752FFFFA8527DA8FFAF7D2727FFFF527DFFFF7D7DA8FD%0EFF7DF8A8FFFF84A8A827FFFFFF5227FFA8277DFD0CFF52F87DFD04FFAF%FD04FF7DF8FFFFFFA8FFFFFFA8FD09FF7DF8CCFECC7BCCA527C7FEFE5227%FFA927A87D275227FF275253FFFFFFA8275227FFA8F8592753FF52525227%FF2752277DA82752A8FD0EFF5227A8FFFFA8A8FF27FFFFFF2727FFFFF8A8%FF52277DFFA8277DFD04FF275227FFAF5227527DFF7D522727FF7E275284%FF52527DFD08FF5227A4FEC69FA4A5F8CCC6FE2727FFFFF8A8277DFF277D%2727FD04FF7D27A9F8A8A827A87D27A8F8FF7D277D27A852277DF8A8FD0F%FF59F8A8FFFF7DFFA8277EFFFF52F8FFA8277D5227A8F8A82752A8FFFFFF%7D27A827A8A8F8A85227A827527D27A8F8A852277D277DFD09FF7DF8CCFE%CCC7CCA527C7CCFE5227FFFF277D277DFF277EA82728FFFFFF2727522753%FFF8FF7D527D27FF7D2784277D52A8FF7DF8A8FD0EFF5227A8FFFFA8FFFF%27A8FFFF2727FFFF27A8277DFF277D7DF8A8FFFFFF7D27A8F87DA827A8A8%27A8F8FF7D527D277D522EA82752A8FD08FF5227A4FEC6FEC6C727CCC6FE%2727FFFFF8A82752A8277EFF7D27A8FFA8277DA82727A827A87D27A8F8A8%7D277D277DFFA8FFA82727FD0EFF59F8A8FFFFA9FFA827A8FFFF5227FFA8%277D5252FFF87DFF7DF8AFFFFF2752522727A8F8AF7D277D27FF7E27A8F8%7DA8FFFFFF2052FD08FF7DF8C7FEFEFECCA552FECCFE2727FFFF27A8A827%2752FF282752FFFF7D27FFFFA8F88427FF7D52FF7D275252FF5252277D7D%2727A8FD0EFF5227A8FD05FF27FFFFFF2727FFFFF8A87D275227A87D5227%A8FF7E27A8FF7D277D27A87D27FF27525227FF52527D7DA8522752FD08FF%CF5251FEC6FEC67C7BFEA45127A8FFFFA8FFFFFF84FFFFA8A8FFFFFFA8A8%FFFFFFA8A8A8FFFFA8FFFFA87DFFFFFFA8A8A8FF7DAFFD0FFFA8F87DFD04%FF7D52FFFF7D2752FFA87DA8FF52527DFF52527DFFFFA853FFFFFF52A852%FFA87DFFAF52527DFFA85227A8A85252FD0BFFA8CDCCFECC277C7B527DFD%38FFA87DFD04FF5284FF59527DFD34FFCFCFC9A87DA8A8FD3BFFA8FFFFFF%527D527DA8FD42FFA8FD05FFA8FD05FFA8FD2DFFA8FD44FF277DA8FF7DA8%A87D277DA8FF527DFF7D52A8A8FF52A8A8FF7DFFA8A87E7D7DA8A87D7DA8%A8FD1EFF597DFFFFFFA8FFA87D7DFFFFA87DFFA87EFFFFA87DA8FD07FF7D%FFFFFFA8A8FD1AFF527E52277D7D7D52527D5252537DFF5253277DFF5952%52527D5252525952522853527D527DFD1EFF27A87D7D7DA8A87D277D7D7D%527DFF7D527D7DFF527D7DA87D84527D52FD087DFD18FF52A82752537D27%5252522859527DA85252527DFF525352532752527D52525253527D52527D%FD1DFFA8527D52277DFD065227527DFF2E7D277DFF52527D52592752527D%2852275252522753FD1AFFA8FFFFA8AFA8FFA8FFFFA8A8FFA8FFA8FFFFFF%A8FF7D52A9FFA8FFA8FFA8FFA8FFA8FD1FFF7DFF52A87D7E52A8847D52A8%7DA8FF7D7D7E7DFF7DA8A87D27A87DA8A8A87D7EA8A87D7D84FD26FFA8FD%09FFA8FD41FF7D7DFDFCFFFDFCFFFD17FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 Ap0 O0 1 1 0 k0 R0 1 1 0 K0 J 0 j 0.24976 w 4 M []0 d0 XR523.3242 373.4199 m334.0518 373.4199 L334.0518 430.1582 L523.3242 430.1582 L523.3242 373.4199 L(b) *0 0 0 0 k1 w539.3037 341.4727 m317.8359 341.4727 L317.8359 446.1055 L539.3037 446.1055 L539.3037 341.4727 Lfu0 R0 1 1 0 K2 w539.3633 357.4941 m317.8359 357.4941 L317.8359 446.1055 L539.3633 446.1055 L539.3633 357.4941 L(b) *0 Ap1 w1 XR334.2441 427.4824 m347.1621 430.1777 358.0146 430.1777 v368.8682 430.1777 382.3672 427.4824 Y382.3672 391.377 382.3672 385.9609 V382.3672 382.5781 380.2949 380.7598 379.5566 380.2266 C377.9043 379.0352 370.502 373.4199 358.3223 373.4199 C346.8633 373.4199 339.8721 378.3633 337.0947 380.3086 C335.8486 381.1875 334.2441 383.1055 334.2441 385.9609 C334.2441 390.3535 334.2441 427.4824 Yfuu0 0 0 1 k0 XR378.7705 379.4531 m368.9551 373.0879 358.7637 373.4336 y358.4824 374.7344 358.5947 376.9766 v358.7061 379.2188 359.9307 378.5879 360.8164 380.3594 c361.1367 381.002 361.4141 381.4453 361.916 382.9531 c361.9355 383.0156 361.3281 393.7578 361.1738 398.3164 c361.0908 400.7734 360.6289 404.873 360.0889 408.8574 c359.7686 411.2207 359.0518 413.0918 358.7188 415.334 c358.2393 418.5723 357.6816 422.2246 y357.2822 421.1934 356.71 417.3359 356.1348 412.9805 c355.8594 410.8906 355.584 408.6875 355.3252 406.627 c354.7783 402.2637 353.416 390.584 353.2109 389.9512 c352.8994 388.9902 352.8652 390.2051 y353.6729 402.4551 353.916 407.8281 V354.0352 410.4551 354.2334 413.3418 354.5605 416.1113 C354.8066 418.1895 355.125 420.2051 355.5371 421.9941 C356.9404 426.2305 357.3877 426.3164 v357.834 426.3984 359.4531 423.6445 360.001 421.1934 c361.2383 415.6582 361.9688 414.9492 362.9121 409.1348 c363.8086 403.6094 364.627 398.9863 364.7383 398.2305 c365.1396 395.4883 364.9414 386.9355 364.25 383.5293 C364.0859 382.5996 364.0352 382.2578 363.4287 381.6426 c362.0059 380.2051 360.9941 378.4883 360.9941 377.3672 c360.9941 376.2461 360.8076 376.2676 361.0742 375.6172 C362.9502 372.8086 373.7324 379.2363 V377.1025 381 377.1025 384.8984 V377.1025 424.3066 l366.4102 427.9219 358.1758 427.9219 v349.9395 427.9219 339.6279 424.3145 y339.6279 385.0742 l339.6279 382.6602 339.9795 378.1309 343.4277 376.584 C334.2441 379.7285 334.2441 385.123 V334.2441 427.6465 l348.2637 430.2285 358.1816 430.2285 v368.0996 430.2285 382.3672 427.6465 y382.3672 388.7402 382.3672 385.0723 v382.3672 381.4063 378.7705 379.4531 YfUUu*u512.0068 412.3887 m511.0273 411.8418 509.709 411.5703 508.0547 411.5703 c506.3867 411.5703 505.0908 412.0742 504.1641 413.084 c503.2402 414.0938 502.7773 415.5039 502.7773 417.3125 c502.7773 419.1367 503.2402 420.5879 504.166 421.666 c505.0645 422.7051 506.2559 423.2246 507.7422 423.2246 c508.4014 423.2246 508.9707 423.1523 509.4473 423.0078 c509.4473 427.584 L512.0068 427.584 l512.0068 412.3887 Lf1 D509.4473 413.4668 m509.4473 421.625 L509.1094 421.7227 508.7305 421.7715 508.3105 421.7715 c506.3203 421.7715 505.3242 420.334 505.3242 417.4609 c505.3242 414.6289 506.2559 413.2129 508.1211 413.2129 c508.7383 413.2129 509.1797 413.2969 509.4473 413.4668 cf*U*u0 D523.7061 417.5215 m516.7656 416.5156 L516.9746 414.4141 518.0068 413.3633 519.8574 413.3633 c520.9512 413.3633 521.9043 413.5703 522.7178 413.9824 c523.3262 412.3691 L522.3594 411.8359 521.1113 411.5703 519.584 411.5703 c517.958 411.5703 516.6729 412.082 515.7344 413.1055 c514.7949 414.127 514.3252 415.584 514.3252 417.4766 c514.3252 419.3125 514.7568 420.7461 515.6182 421.7734 c516.4814 422.8047 517.6621 423.3203 519.1621 423.3203 c520.6758 423.3203 521.8252 422.8262 522.6113 421.8379 c523.3975 420.8516 523.7617 419.4141 523.7061 417.5215 cf1 D521.3086 418.5273 m521.3086 420.6719 520.5645 421.7441 519.0762 421.7441 c518.2891 421.7441 517.6855 421.4297 517.2637 420.7988 c516.8027 420.1113 516.583 419.1152 516.6123 417.8125 c521.3086 418.5273 Lf*UUu*u0 D394.7178 381.543 m390.6953 381.543 L390.6953 406.4121 L394.7178 406.4121 l394.7178 381.543 Lf*U*u413.2734 390.4121 m413.2734 387.666 412.6699 385.4805 411.4609 383.8555 c410.1416 382.0977 408.2842 381.2207 405.8906 381.2207 c403.4941 381.2207 401.6387 382.0977 400.3203 383.8555 c399.1104 385.4805 398.5059 387.666 398.5059 390.4121 c398.5059 393.1797 399.1104 395.377 400.3203 397.002 c401.6387 398.7598 403.4941 399.6387 405.8906 399.6387 c408.3066 399.6387 410.1641 398.7598 411.4609 397.002 c412.6699 395.377 413.2734 393.1797 413.2734 390.4121 cf1 D409.2832 390.4434 m409.2832 394.8809 408.1504 397.1016 405.8906 397.1016 c403.6279 397.1016 402.4961 394.8809 402.4961 390.4434 c402.4961 386.1152 403.6279 383.9492 405.8906 383.9492 c408.1504 383.9492 409.2832 386.1152 409.2832 390.4434 cf*U*u0 D427.0625 386.6563 m427.0625 385.1621 426.4805 383.8887 425.3145 382.834 c424.1504 381.7793 422.623 381.252 420.7314 381.252 c418.708 381.252 417.0703 381.6797 415.8184 382.5352 c416.873 385.1035 L417.7305 384.4199 418.8418 384.0801 420.2061 384.0801 c421.0195 384.0801 421.6787 384.3164 422.1836 384.7891 c422.6895 385.2598 422.9434 385.8594 422.9434 386.5859 c422.9434 387.332 422.7451 387.9199 422.3506 388.3477 c421.9551 388.7773 421.2842 389.166 420.3398 389.5176 c417.6377 390.5508 416.2861 392.2109 416.2861 394.4961 c416.2861 395.9473 416.8086 397.1641 417.8506 398.1543 c418.8945 399.1445 420.25 399.6387 421.918 399.6387 c423.7188 399.6387 425.2559 399.2207 426.5293 398.3848 c425.543 396.0449 L424.7314 396.707 423.7881 397.0371 422.7148 397.0371 c421.9238 397.0371 421.3037 396.8125 420.8545 396.3613 c420.4053 395.9121 420.1797 395.3555 420.1797 394.6973 c420.1797 393.5332 421.0586 392.5996 422.8145 391.8965 c425.6465 390.7539 427.0625 389.0078 427.0625 386.6563 cf*U*u456.7334 381.543 m452.041 381.543 L450.1426 387.8828 L442.1914 387.8828 L440.2207 381.543 L436.1367 381.543 L444.3037 406.1973 L448.6016 406.1973 l456.7334 381.543 Lf1 D449.498 390.5332 m446.9551 399.2148 L446.5957 400.4336 446.3809 401.4277 446.3096 402.1934 c446.2383 402.1934 L446.1191 401.5469 445.8906 400.5566 445.5566 399.2148 c442.9063 390.5332 l449.498 390.5332 Lf*U*u0 D473.2773 381.543 m469.2539 381.543 L469.2539 394.1348 L469.2539 396.1113 468.1895 397.1016 466.0605 397.1016 c465.0488 397.1016 464.127 396.9355 463.293 396.6074 c463.293 381.543 L459.2695 381.543 L459.2695 398.3535 L461.0938 399.209 463.4111 399.6387 466.2236 399.6387 c468.707 399.6387 470.543 399.0898 471.7285 397.9902 c472.7607 397.0664 473.2773 395.8027 473.2773 394.1992 c473.2773 381.543 Lf*U*u491.4082 382.5059 m489.8691 381.6484 487.8027 381.2207 485.21 381.2207 c482.5938 381.2207 480.5596 382.0098 479.1084 383.5938 c477.6572 385.1738 476.9316 387.3828 476.9316 390.2168 c476.9316 393.0723 477.6572 395.3457 479.1084 397.0391 c480.5166 398.6641 482.3848 399.4766 484.7139 399.4766 c485.748 399.4766 486.6387 399.3652 487.3857 399.1426 c487.3857 406.332 L491.4082 406.332 l491.4082 382.5059 Lf1 D487.3857 384.1836 m487.3857 396.9688 L486.8584 397.1211 486.2646 397.1992 485.6055 397.1992 c482.4834 397.1992 480.9219 394.9473 480.9219 390.4453 c480.9219 386.0059 482.3848 383.7891 485.3086 383.7891 c486.2754 383.7891 486.9678 383.9199 487.3857 384.1836 cf*U*u0 D509.7139 390.541 m498.834 388.959 L499.1631 385.6621 500.7793 384.0156 503.6797 384.0156 c505.3926 384.0156 506.8867 384.3438 508.1621 385.0039 c509.1172 382.4707 L507.6016 381.6367 505.6465 381.2207 503.251 381.2207 c500.7012 381.2207 498.6914 382.0215 497.2188 383.625 c495.7461 385.2285 495.0117 387.5137 495.0117 390.4785 c495.0117 393.3555 495.6865 395.6016 497.0381 397.2168 c498.3896 398.8301 500.2402 399.6387 502.5928 399.6387 c504.9668 399.6387 506.7695 398.8633 507.999 397.3145 c509.2305 395.7656 509.8018 393.5078 509.7139 390.541 cf1 D505.9482 392.123 m505.9482 395.4844 504.7832 397.166 502.4541 397.166 c501.2236 397.166 500.2793 396.6719 499.6191 395.6836 c498.8945 394.6055 498.5547 393.0449 498.5977 391.002 c505.9482 392.123 Lf*U*u0 D523.5352 386.6563 m523.5352 385.1621 522.9512 383.8887 521.7871 382.834 c520.6211 381.7793 519.0938 381.252 517.2031 381.252 c515.1816 381.252 513.543 381.6797 512.2891 382.5352 c513.3438 385.1035 L514.2031 384.4199 515.3125 384.0801 516.6758 384.0801 c517.4902 384.0801 518.1504 384.3164 518.6563 384.7891 c519.1621 385.2598 519.4141 385.8594 519.4141 386.5859 c519.4141 387.332 519.2168 387.9199 518.8223 388.3477 c518.4258 388.7773 517.7559 389.166 516.8115 389.5176 c514.1094 390.5508 512.7578 392.2109 512.7578 394.4961 c512.7578 395.9473 513.2803 397.1641 514.3223 398.1543 c515.3652 399.1445 516.7227 399.6387 518.3906 399.6387 c520.1914 399.6387 521.7285 399.2207 523.001 398.3848 c522.0137 396.0449 L521.2031 396.707 520.2598 397.0371 519.1846 397.0371 c518.3955 397.0371 517.7773 396.8125 517.3262 396.3613 c516.877 395.9121 516.6523 395.3555 516.6523 394.6973 c516.6523 393.5332 517.5313 392.5996 519.2871 391.8965 c522.1191 390.7539 523.5352 389.0078 523.5352 386.6563 cf*UUu*u411.917 411.7422 m409.3555 411.7422 L409.3555 419.7754 L409.3555 421.0371 408.6758 421.668 407.3164 421.668 c406.6709 421.668 406.082 421.5625 405.5488 421.3535 c405.5488 411.7422 L402.9883 411.7422 L402.9883 422.4648 L404.1504 423.0117 405.6289 423.2852 407.4219 423.2852 c409.0039 423.2852 410.1738 422.9336 410.9277 422.2324 c411.5879 421.6465 411.917 420.8398 411.917 419.8145 c411.917 411.7422 Lf*U*u417.4395 426.3008 m417.4395 425.9492 417.3018 425.6504 417.0293 425.4063 c416.7559 425.1602 416.4219 425.0371 416.0293 425.0371 c415.6367 425.0371 415.3047 425.1602 415.0293 425.4063 c414.7568 425.6504 414.6191 425.9492 414.6191 426.3008 c414.6191 426.6523 414.7568 426.9531 415.0293 427.2051 c415.3047 427.457 415.6367 427.584 416.0293 427.584 c416.4219 427.584 416.7559 427.4609 417.0293 427.2168 c417.3018 426.9707 417.4395 426.666 417.4395 426.3008 cf417.3037 411.7422 m414.7441 411.7422 L414.7441 423.0801 L417.3037 423.0801 l417.3037 411.7422 Lf*U*u428.9785 423.0801 m425.3398 411.7422 L422.9023 411.7422 L419.1992 423.0801 L421.9336 423.0801 L423.9326 415.7617 L424.0859 415.2148 424.1768 414.6953 424.2051 414.207 c424.2471 414.207 L424.3174 414.6113 424.416 415.1309 424.541 415.7617 c426.582 423.0801 l428.9785 423.0801 Lf*U*u439.7207 417.4883 m432.7813 416.4805 L432.9922 414.3789 434.0234 413.3301 435.873 413.3301 c436.9668 413.3301 437.9199 413.5371 438.7344 413.9492 c439.3438 412.334 L438.377 411.8008 437.1289 411.5352 435.6006 411.5352 c433.9727 411.5352 432.6895 412.0469 431.751 413.0703 c430.8105 414.0918 430.3418 415.5508 430.3418 417.4414 c430.3418 419.2773 430.7734 420.7109 431.6348 421.7402 c432.498 422.7695 433.6787 423.2852 435.1787 423.2852 c436.6924 423.2852 437.8428 422.791 438.6279 421.8047 c439.4141 420.8164 439.7773 419.3789 439.7207 417.4883 cf1 D437.3262 418.4922 m437.3262 420.6387 436.582 421.7109 435.0928 421.7109 c434.3066 421.7109 433.7021 421.3945 433.2813 420.7637 c432.8184 420.0781 432.5996 419.0801 432.6289 417.7773 c437.3262 418.4922 Lf*U*u0 D447.5156 423.2715 m447.0107 421.3965 L446.6309 421.5215 446.2373 421.584 445.8301 421.584 c445.3389 421.584 444.9316 421.4922 444.6074 421.3105 c444.6074 411.7422 L442.0469 411.7422 L442.0469 422.4727 l443.2949 423.0742 445.1191 423.3418 447.5156 423.2715 cf*U*u455.6895 415 m455.6895 414.0469 455.3184 413.2324 454.5742 412.5605 c453.8311 411.8848 452.8555 411.5488 451.6504 411.5488 c450.3594 411.5488 449.3135 411.8242 448.5146 412.3711 c449.1875 414.0117 L449.7344 413.5742 450.4434 413.3555 451.3145 413.3555 c451.832 413.3555 452.2539 413.5078 452.5762 413.8105 c452.8994 414.1094 453.0605 414.4922 453.0605 414.9551 c453.0605 415.4316 452.9336 415.8066 452.6836 416.0801 c452.4297 416.3535 452.0029 416.6035 451.4004 416.8262 c449.6777 417.4863 448.8145 418.5449 448.8145 420.0039 c448.8145 420.9297 449.1475 421.707 449.8125 422.3379 c450.4785 422.9688 451.3438 423.2852 452.4082 423.2852 c453.5566 423.2852 454.5371 423.0195 455.3496 422.4863 c454.7188 420.9961 L454.2012 421.418 453.5996 421.6289 452.9141 421.6289 c452.4072 421.6289 452.0117 421.4844 451.7246 421.1973 c451.4375 420.9082 451.2949 420.5547 451.2949 420.1328 c451.2949 419.3906 451.8545 418.7949 452.9766 418.3457 c454.7852 417.6152 455.6895 416.5 455.6895 415 cf*U*u460.7051 426.3008 m460.7051 425.9492 460.5684 425.6504 460.2949 425.4063 c460.0215 425.1602 459.6875 425.0371 459.2959 425.0371 c458.9043 425.0371 458.5703 425.1602 458.2959 425.4063 c458.0234 425.6504 457.8867 425.9492 457.8867 426.3008 c457.8867 426.6523 458.0234 426.9531 458.2959 427.2051 c458.5703 427.457 458.9043 427.584 459.2959 427.584 c459.6875 427.584 460.0215 427.4609 460.2949 427.2168 c460.5684 426.9707 460.7051 426.666 460.7051 426.3008 cf460.5703 411.7422 m458.0098 411.7422 L458.0098 423.0801 L460.5703 423.0801 l460.5703 411.7422 Lf*U*u472.2158 412.3555 m471.2354 411.8086 469.917 411.5352 468.2627 411.5352 c466.5957 411.5352 465.2988 412.041 464.373 413.0508 c463.4482 414.0586 462.9863 415.4688 462.9863 417.2793 c462.9863 419.1016 463.4492 420.5527 464.375 421.6328 c465.2715 422.6699 466.4648 423.1895 467.9512 423.1895 c468.6094 423.1895 469.1787 423.1172 469.6543 422.9727 c469.6543 427.5508 L472.2158 427.5508 l472.2158 412.3555 Lf1 D469.6543 413.4316 m469.6543 421.5898 L469.3193 421.6875 468.9414 421.7383 468.5195 421.7383 c466.5273 421.7383 465.5332 420.3008 465.5332 417.4258 c465.5332 414.5938 466.4648 413.1777 468.3301 413.1777 c468.9463 413.1777 469.3896 413.2637 469.6543 413.4316 cf*U*u0 D483.1328 412.3555 m482.1113 411.8086 480.7441 411.5352 479.0332 411.5352 c475.9512 411.5352 474.4102 412.6836 474.4102 414.9824 c474.4102 416.3535 475.0332 417.3828 476.2813 418.0703 c477.2607 418.6016 478.7461 418.9668 480.7363 419.1621 c480.7363 419.7715 L480.7363 421.0176 479.9863 421.6406 478.4883 421.6406 c477.5488 421.6406 476.6035 421.4121 475.6504 420.9531 c475.0625 422.4238 L476.2383 422.998 477.5352 423.2852 478.9502 423.2852 c481.7383 423.2852 483.1328 421.9805 483.1328 419.375 c483.1328 412.3555 Lf1 D480.7363 413.2754 m480.7363 417.9453 L479.3926 417.7773 478.4424 417.5195 477.8828 417.168 c477.1836 416.7324 476.834 416.0313 476.834 415.0625 c476.834 413.6621 477.624 412.959 479.2041 412.959 c479.8066 412.959 480.3164 413.0645 480.7363 413.2754 cf*U*u0 D494.6797 412.3555 m493.6982 411.8086 492.3799 411.5352 490.7266 411.5352 c489.0586 411.5352 487.7637 412.041 486.8359 413.0508 c485.9121 414.0586 485.4492 415.4688 485.4492 417.2793 c485.4492 419.1016 485.9131 420.5527 486.8379 421.6328 c487.7363 422.6699 488.9277 423.1895 490.4141 423.1895 c491.0742 423.1895 491.6416 423.1172 492.1182 422.9727 c492.1182 427.5508 L494.6797 427.5508 l494.6797 412.3555 Lf1 D492.1182 413.4316 m492.1182 421.5898 L491.7822 421.6875 491.4033 421.7383 490.9834 421.7383 c488.9922 421.7383 487.9961 420.3008 487.9961 417.4258 c487.9961 414.5938 488.9297 413.1777 490.7949 413.1777 c491.4102 413.1777 491.8525 413.2637 492.1182 413.4316 cf*UU*u0 D390.6631 427.5234 m393.3906 427.5234 L393.3906 415.3359 L393.3906 413.9961 394.1113 413.3242 395.5566 413.3242 c396.2422 413.3242 396.8672 413.4375 397.4316 413.6602 c397.4316 427.5234 L400.1582 427.5234 L400.1582 412.4766 L398.9219 411.8965 397.3506 411.6055 395.4443 411.6055 c393.7617 411.6055 392.5166 411.9785 391.7129 412.7227 c391.0137 413.3477 390.6631 414.2051 390.6631 415.293 c390.6631 427.5234 Lf*UUu*u396.1963 366.5859 m393.0645 366.5859 L393.0645 363.4395 L395.8506 363.4395 L395.8506 362.1787 L393.0645 362.1787 L393.0645 357.4805 L391.1523 357.4805 L391.1523 367.8604 L396.1963 367.8604 l396.1963 366.5859 Lf*U*u402.8213 357.8828 m402.1465 357.5225 401.2461 357.3418 400.1191 357.3418 c398.0859 357.3418 397.0703 358.0996 397.0703 359.6143 c397.0703 360.585 397.5547 361.3008 398.5254 361.7627 c399.126 362.0488 400.0313 362.252 401.2412 362.373 c401.2412 362.7744 L401.2412 363.5967 400.7471 364.0078 399.7588 364.0078 c399.1396 364.0078 398.5156 363.8555 397.8877 363.5508 c397.5 364.5205 L398.2754 364.8994 399.1299 365.0889 400.0635 365.0889 c401.9023 365.0889 402.8213 364.2295 402.8213 362.5107 c402.8213 357.8828 Lf1 D401.2412 358.4922 m401.2412 361.5684 L400.415 361.4668 399.8291 361.3242 399.4863 361.1396 c398.9287 360.8438 398.6494 360.3535 398.6494 359.6699 c398.6494 358.7461 399.1748 358.2842 400.2246 358.2842 c400.624 358.2842 400.9629 358.3535 401.2412 358.4922 cf*U*u0 D409.0439 357.8545 m408.665 357.5127 408.0781 357.3418 407.2832 357.3418 c406.2861 357.3418 405.5234 357.7617 404.9971 358.6035 c404.5537 359.3047 404.332 360.1826 404.332 361.2363 c404.332 362.2891 404.5576 363.1621 405.0107 363.8555 c405.5371 364.6777 406.2998 365.0889 407.2979 365.0889 c408.0459 365.0889 408.623 364.918 409.0293 364.5762 c408.6699 363.6201 L408.4014 363.8232 408.0684 363.9248 407.6719 363.9248 c406.5811 363.9248 406.0361 363.0352 406.0361 361.2568 c406.0361 360.5752 406.1377 359.999 406.3408 359.5293 c406.6182 358.8838 407.0527 358.5615 407.6436 358.5615 c408.0508 358.5615 408.3877 358.6719 408.6553 358.8945 c409.0439 357.8545 Lf*U*u416.1387 357.9238 m415.3906 357.5264 414.4346 357.3281 413.2695 357.3281 c411.3389 357.3281 410.373 358.1689 410.373 359.8506 c410.373 364.9502 L412.0781 364.9502 L412.0781 359.7529 L412.0781 358.9121 412.4932 358.4922 413.3242 358.4922 c413.7813 358.4922 414.1504 358.5752 414.4346 358.7412 c414.4346 364.9502 L416.1387 364.9502 l416.1387 357.9238 Lf*U*u419.7139 357.4805 m418.0088 357.4805 L418.0088 367.9717 L419.7139 367.9717 l419.7139 357.4805 Lf*U*u424.9111 357.5498 m424.6895 357.4482 424.4023 357.3975 424.0518 357.3975 c423.4141 357.3975 422.9131 357.5752 422.5479 357.9307 c422.1826 358.2861 422 358.7832 422 359.4209 c422 363.8691 L421.1689 363.8691 L421.1689 364.9502 L422 364.9502 L422 367.4453 L423.7051 367.916 L423.7051 364.9502 L424.9111 364.9502 L424.9111 363.8691 L423.7051 363.8691 L423.7051 359.5039 L423.7051 358.8574 423.9746 358.5342 424.5137 358.5342 c424.623 358.5342 424.7549 358.5566 424.9111 358.6035 c424.9111 357.5498 Lf*U*u431.7285 357.8828 m431.0537 357.5225 430.1533 357.3418 429.0264 357.3418 c426.9932 357.3418 425.9775 358.0996 425.9775 359.6143 c425.9775 360.585 426.4619 361.3008 427.4326 361.7627 c428.0332 362.0488 428.9385 362.252 430.1484 362.373 c430.1484 362.7744 L430.1484 363.5967 429.6543 364.0078 428.666 364.0078 c428.0469 364.0078 427.4229 363.8555 426.7949 363.5508 c426.4072 364.5205 L427.1826 364.8994 428.0371 365.0889 428.9707 365.0889 c430.8096 365.0889 431.7285 364.2295 431.7285 362.5107 c431.7285 357.8828 Lf1 D430.1484 358.4922 m430.1484 361.5684 L429.3223 361.4668 428.7363 361.3242 428.3936 361.1396 c427.8359 360.8438 427.5566 360.3535 427.5566 359.6699 c427.5566 358.7461 428.082 358.2842 429.1318 358.2842 c429.5313 358.2842 429.8701 358.3535 430.1484 358.4922 cf*U*u0 D439.2813 357.9385 m438.6348 357.5781 437.7656 357.3975 436.6758 357.3975 c435.5303 357.3975 434.6572 357.749 434.0566 358.4521 c433.4834 359.1191 433.1973 360.0303 433.1973 361.1875 c433.1973 362.2979 433.46 363.2051 433.9844 363.9092 c434.5654 364.6953 435.3887 365.0889 436.458 365.0889 c436.8906 365.0889 437.2637 365.043 437.5771 364.9502 c437.5771 368.0273 L439.2813 368.0273 l439.2813 357.9385 Lf1 D437.5771 358.6455 m437.5771 364.0352 L437.3564 364.1006 437.1074 364.1328 436.832 364.1328 c435.5273 364.1328 434.874 363.1836 434.874 361.2852 c434.874 359.4141 435.4854 358.4785 436.708 358.4785 c437.1123 358.4785 437.4023 358.5342 437.5771 358.6455 cf*U*u0 D450.6592 357.9385 m450.0127 357.5781 449.1436 357.3975 448.0537 357.3975 c446.9082 357.3975 446.0352 357.749 445.4346 358.4521 c444.8613 359.1191 444.5752 360.0303 444.5752 361.1875 c444.5752 362.2979 444.8379 363.2051 445.3623 363.9092 c445.9434 364.6953 446.7666 365.0889 447.8359 365.0889 c448.2686 365.0889 448.6416 365.043 448.9551 364.9502 c448.9551 368.0273 L450.6592 368.0273 l450.6592 357.9385 Lf1 D448.9551 358.6455 m448.9551 364.0352 L448.7344 364.1006 448.4854 364.1328 448.21 364.1328 c446.9053 364.1328 446.252 363.1836 446.252 361.2852 c446.252 359.4141 446.8633 358.4785 448.0859 358.4785 c448.4902 358.4785 448.7803 358.5342 448.9551 358.6455 cf*U*u0 D458.4072 361.2588 m453.832 360.6035 L453.9707 359.2051 454.6494 358.5059 455.8701 358.5059 c456.5898 358.5059 457.2188 358.6494 457.7549 358.9355 c458.1572 357.8682 L457.5195 357.5176 456.6973 357.3418 455.6895 357.3418 c454.5439 357.3418 453.667 357.7109 453.0566 358.4502 c452.502 359.1338 452.2256 360.0625 452.2256 361.2363 c452.2256 362.3535 452.4697 363.25 452.96 363.9248 c453.5137 364.7012 454.332 365.0889 455.4131 365.0889 c456.5127 365.0889 457.3115 364.71 457.8105 363.9512 c458.2451 363.2939 458.4434 362.3965 458.4072 361.2588 cf1 D456.8262 361.9287 m456.8262 363.3516 456.3369 364.0635 455.3574 364.0635 c454.7285 364.0635 454.2813 363.7656 454.0127 363.1719 c453.8096 362.7256 453.7168 362.1543 453.7354 361.458 c456.8262 361.9287 Lf*U*u0 D465.6826 357.4805 m463.7422 357.4805 L463.7422 367.916 L465.6826 367.916 l465.6826 357.4805 Lf*U*u473.4014 357.4805 m471.6963 357.4805 L471.6963 362.7744 L471.6963 363.6064 471.2529 364.0215 470.3672 364.0215 c469.9463 364.0215 469.5625 363.9521 469.2158 363.8135 c469.2158 357.4805 L467.5107 357.4805 L467.5107 364.5488 L468.2783 364.9092 469.2529 365.0889 470.4355 365.0889 c471.2852 365.0889 471.9648 364.9268 472.4727 364.6035 c473.0918 364.2061 473.4014 363.6064 473.4014 362.8018 c473.4014 357.4805 Lf*U*u480.9814 357.3691 m480.9814 356.3994 480.7139 355.6533 480.1777 355.1318 c479.6416 354.6094 478.8887 354.3486 477.9189 354.3486 c476.8105 354.3486 475.96 354.5244 475.3691 354.875 c475.8398 355.9834 L476.376 355.6885 476.9717 355.54 477.6279 355.54 c478.7734 355.54 479.3467 356.0996 479.3467 357.2168 c479.3467 357.6885 L479.0225 357.4941 478.5566 357.3975 477.9463 357.3975 c476.958 357.3975 476.1953 357.7725 475.6602 358.5215 c475.1797 359.1787 474.9395 360.0215 474.9395 361.0488 c474.9395 362.2793 475.2305 363.2471 475.8125 363.9502 c476.4404 364.709 477.3555 365.0889 478.5566 365.0889 c479.6191 365.0889 480.4277 364.9092 480.9814 364.5488 c480.9814 357.3691 Lf1 D479.3467 358.6172 m479.3467 363.9248 L479.1523 364.0352 478.8613 364.0908 478.4736 364.0908 c477.2354 364.0908 476.6162 363.1045 476.6162 361.1318 c476.6162 359.2979 477.207 358.3809 478.3896 358.3809 c478.7598 358.3809 479.0781 358.46 479.3467 358.6172 cf*U*u0 D488.6738 361.2588 m484.0986 360.6035 L484.2373 359.2051 484.916 358.5059 486.1367 358.5059 c486.8564 358.5059 487.4854 358.6494 488.0215 358.9355 c488.4238 357.8682 L487.7861 357.5176 486.9639 357.3418 485.9561 357.3418 c484.8105 357.3418 483.9336 357.7109 483.3232 358.4502 c482.7686 359.1338 482.4922 360.0625 482.4922 361.2363 c482.4922 362.3535 482.7363 363.25 483.2266 363.9248 c483.7803 364.7012 484.5986 365.0889 485.6797 365.0889 c486.7793 365.0889 487.5781 364.71 488.0771 363.9512 c488.5117 363.2939 488.71 362.3965 488.6738 361.2588 cf1 D487.0928 361.9287 m487.0928 363.3516 486.6035 364.0635 485.624 364.0635 c484.9951 364.0635 484.5479 363.7656 484.2793 363.1719 c484.0762 362.7256 483.9834 362.1543 484.002 361.458 c487.0928 361.9287 Lf*U*u0 D496.1016 357.4805 m494.3965 357.4805 L494.3965 362.7744 L494.3965 363.6064 493.9531 364.0215 493.0674 364.0215 c492.6465 364.0215 492.2627 363.9521 491.916 363.8135 c491.916 357.4805 L490.2109 357.4805 L490.2109 364.5488 L490.9785 364.9092 491.9531 365.0889 493.1357 365.0889 c493.9854 365.0889 494.665 364.9268 495.1729 364.6035 c495.792 364.2061 496.1016 363.6064 496.1016 362.8018 c496.1016 357.4805 Lf*U*u499.7324 367.0703 m499.7324 366.8301 499.6396 366.6318 499.4551 366.4746 c499.2705 366.3174 499.0527 366.2393 498.8037 366.2393 c498.5537 366.2393 498.3369 366.3174 498.1523 366.4746 c497.9678 366.6318 497.875 366.8301 497.875 367.0703 c497.875 367.3105 497.9678 367.5117 498.1523 367.6738 c498.3369 367.835 498.5537 367.916 498.8037 367.916 c499.0527 367.916 499.2705 367.8379 499.4551 367.6807 c499.6396 367.5234 499.7324 367.3203 499.7324 367.0703 cf499.6494 357.4805 m497.9443 357.4805 L497.9443 364.9502 L499.6494 364.9502 l499.6494 357.4805 Lf*U*u507.4111 361.2588 m502.8359 360.6035 L502.9746 359.2051 503.6533 358.5059 504.874 358.5059 c505.5938 358.5059 506.2227 358.6494 506.7588 358.9355 c507.1611 357.8682 L506.5234 357.5176 505.7012 357.3418 504.6934 357.3418 c503.5479 357.3418 502.6709 357.7109 502.0605 358.4502 c501.5059 359.1338 501.2295 360.0625 501.2295 361.2363 c501.2295 362.3535 501.4736 363.25 501.9639 363.9248 c502.5176 364.7012 503.3359 365.0889 504.417 365.0889 c505.5166 365.0889 506.3154 364.71 506.8145 363.9512 c507.249 363.2939 507.4473 362.3965 507.4111 361.2588 cf1 D505.8301 361.9287 m505.8301 363.3516 505.3408 364.0635 504.3613 364.0635 c503.7324 364.0635 503.2852 363.7656 503.0166 363.1719 c502.8135 362.7256 502.7207 362.1543 502.7393 361.458 c505.8301 361.9287 Lf*U*u0 D512.5518 365.0752 m512.2217 363.8418 L511.9736 363.9248 511.7168 363.9668 511.4512 363.9668 c511.1299 363.9668 510.8643 363.9063 510.6533 363.7861 c510.6533 357.4805 L508.9482 357.4805 L508.9482 364.5488 l509.7705 364.9453 510.9717 365.1211 512.5518 365.0752 cf*U*u516.335 367.6523 m514.6445 365.7402 L513.7158 365.7402 L514.6719 367.6943 L514.959 367.8604 515.2822 367.9434 515.6426 367.9434 c516.0215 367.9434 516.252 367.8467 516.335 367.6523 cf515.4209 357.4805 m513.7158 357.4805 L513.7158 364.9502 L515.4209 364.9502 l515.4209 357.4805 Lf*U*u522.6689 357.8828 m521.9941 357.5225 521.0938 357.3418 519.9668 357.3418 c517.9336 357.3418 516.918 358.0996 516.918 359.6143 c516.918 360.585 517.4023 361.3008 518.373 361.7627 c518.9736 362.0488 519.8789 362.252 521.0889 362.373 c521.0889 362.7744 L521.0889 363.5967 520.5947 364.0078 519.6064 364.0078 c518.9873 364.0078 518.3633 363.8555 517.7354 363.5508 c517.3477 364.5205 L518.123 364.8994 518.9775 365.0889 519.9111 365.0889 c521.75 365.0889 522.6689 364.2295 522.6689 362.5107 c522.6689 357.8828 Lf1 D521.0889 358.4922 m521.0889 361.5684 L520.2627 361.4668 519.6768 361.3242 519.334 361.1396 c518.7764 360.8438 518.4971 360.3535 518.4971 359.6699 c518.4971 358.7461 519.0225 358.2842 520.0723 358.2842 c520.4717 358.2842 520.8105 358.3535 521.0889 358.4922 cf*UUUu1 Ap0 D0 1 1 0 k0 R0 1 1 0 K0.24976 w279.5854 375.1328 m90.3135 375.1328 L90.3135 431.8711 L279.5854 431.8711 L279.5854 375.1328 L(b) *0 0 0 0 k1 w295.5645 343.1836 m74.0972 343.1836 L74.0972 447.8164 L295.5645 447.8164 L295.5645 343.1836 Lfu0 R0 1 1 0 K2 w295.6245 359.2051 m74.0972 359.2051 L74.0972 447.8164 L295.6245 447.8164 L295.6245 359.2051 L(b) *0 Ap0 0 1 0 k1 w1 XR90.5044 429.1934 m103.4224 431.8906 114.2759 431.8906 v125.1289 431.8906 138.6284 429.1934 Y138.6284 393.0879 138.6284 387.6738 V138.6284 384.2891 136.5552 382.4707 135.8179 381.9375 C134.1646 380.7461 126.7627 375.1309 114.584 375.1309 C103.1235 375.1309 96.1328 380.0742 93.3555 382.0195 C92.1094 382.8984 90.5044 384.8164 90.5044 387.6738 C90.5044 392.0645 90.5044 429.1934 Yfuu0 0 0 1 k0 XR135.0317 381.1641 m125.2153 374.7988 115.0239 375.1445 y114.7427 376.4453 114.855 378.6875 v114.9668 380.9297 116.1909 380.2988 117.0767 382.0703 c117.3975 382.7129 117.6743 383.1582 118.1768 384.6641 c118.1968 384.7266 117.5894 395.4688 117.4346 400.0293 c117.3521 402.4844 116.8901 406.584 116.3496 410.5684 c116.0303 412.9316 115.3125 414.8027 114.98 417.0449 c114.5 420.2832 113.9424 423.9355 y113.543 422.9043 112.9712 419.0469 112.3965 414.6914 c112.1206 412.6016 111.8442 410.3984 111.5864 408.3379 c111.0396 403.9766 109.6768 392.2949 109.4712 391.6621 c109.1597 390.7012 109.1265 391.918 y109.9341 404.168 110.1768 409.5391 V110.2954 412.168 110.4941 415.0527 110.8223 417.8223 C111.0679 419.9023 111.3862 421.916 111.7983 423.7051 C113.2007 427.9414 113.6484 428.0273 v114.0952 428.1113 115.7139 425.3555 116.2612 422.9043 c117.499 417.3691 118.2295 416.6602 119.1724 410.8457 c120.0693 405.3203 120.8882 400.6973 120.9995 399.9414 c121.4004 397.1992 121.2021 388.6465 120.5103 385.2402 C120.3462 384.3105 120.2969 383.9688 119.6899 383.3535 c118.2671 381.916 117.2559 380.1992 117.2559 379.0781 c117.2559 377.957 117.0688 377.9785 117.335 377.3281 C119.2109 374.5195 129.9941 380.9473 V133.3633 382.7109 133.3633 386.6094 V133.3633 426.0176 l122.6714 429.6328 114.436 429.6328 v106.2007 429.6328 95.8887 426.0254 y95.8887 386.7871 l95.8887 384.3711 96.2397 379.8418 99.689 378.2969 C90.5044 381.4395 90.5044 386.834 V90.5044 429.3594 l104.5249 431.9395 114.4424 431.9395 v124.3599 431.9395 138.6284 429.3594 y138.6284 390.4512 138.6284 386.7832 v138.6284 383.1172 135.0317 381.1641 YfUUu*u268.2676 414.1016 m267.2871 413.5547 265.9697 413.2813 264.3149 413.2813 c262.6475 413.2813 261.3511 413.7852 260.4258 414.7949 c259.501 415.8066 259.0386 417.2148 259.0386 419.0234 c259.0386 420.8477 259.501 422.2988 260.4268 423.377 c261.3247 424.416 262.5171 424.9355 264.0029 424.9355 c264.6621 424.9355 265.2305 424.8633 265.708 424.7188 c265.708 429.2969 L268.2676 429.2969 l268.2676 414.1016 Lf1 D265.708 415.1777 m265.708 423.3359 L265.3706 423.4336 264.9917 423.4824 264.5713 423.4824 c262.5811 423.4824 261.5854 422.0469 261.5854 419.1719 c261.5854 416.3398 262.5176 414.9238 264.3823 414.9238 c264.9995 414.9238 265.4409 415.0078 265.708 415.1777 cf*U*u0 D279.9663 419.2344 m273.0259 418.2266 L273.2354 416.125 274.2676 415.0762 276.1187 415.0762 c277.2119 415.0762 278.165 415.2813 278.979 415.6934 c279.5869 414.0801 L278.6201 413.5469 277.3726 413.2813 275.8447 413.2813 c274.2183 413.2813 272.9336 413.793 271.9946 414.8164 c271.0562 415.8398 270.5859 417.2949 270.5859 419.1875 c270.5859 421.0234 271.0171 422.457 271.8789 423.4863 c272.7422 424.5156 273.9224 425.0313 275.4224 425.0313 c276.937 425.0313 278.0864 424.5371 278.8726 423.5488 c279.6582 422.5625 280.022 421.125 279.9663 419.2344 cf1 D277.5693 420.2383 m277.5693 422.3828 276.8252 423.4551 275.3364 423.4551 c274.5498 423.4551 273.9468 423.1406 273.5254 422.5098 c273.063 421.8223 272.8447 420.8262 272.873 419.5234 c277.5693 420.2383 Lf*UUu*u0 D150.979 383.2539 m146.9556 383.2539 L146.9556 408.125 L150.979 408.125 l150.979 383.2539 Lf*U*u169.5342 392.123 m169.5342 389.377 168.9302 387.1914 167.7212 385.5664 c166.4023 383.8086 164.5459 382.9316 162.1509 382.9316 c159.7554 382.9316 157.8984 383.8086 156.5801 385.5664 c155.3711 387.1914 154.7671 389.377 154.7671 392.123 c154.7671 394.8906 155.3711 397.0879 156.5801 398.7129 c157.8984 400.4707 159.7554 401.3496 162.1509 401.3496 c164.5679 401.3496 166.4248 400.4707 167.7212 398.7129 c168.9302 397.0879 169.5342 394.8906 169.5342 392.123 cf1 D165.5435 392.1543 m165.5435 396.5938 164.4121 398.8125 162.1509 398.8125 c159.8882 398.8125 158.7573 396.5938 158.7573 392.1543 c158.7573 387.8262 159.8882 385.6621 162.1509 385.6621 c164.4121 385.6621 165.5435 387.8262 165.5435 392.1543 cf*U*u0 D183.3237 388.3691 m183.3237 386.875 182.7412 385.5996 181.5757 384.5449 c180.4106 383.4922 178.8833 382.9629 176.9922 382.9629 c174.9697 382.9629 173.3315 383.3906 172.0786 384.2461 c173.1338 386.8145 L173.9922 386.1309 175.1021 385.791 176.4663 385.791 c177.2798 385.791 177.9395 386.0273 178.4448 386.5 c178.9512 386.9727 179.2036 387.5703 179.2036 388.2969 c179.2036 389.043 179.0059 389.6309 178.6108 390.0586 c178.2153 390.4883 177.5449 390.8789 176.6006 391.2305 c173.8984 392.2617 172.5474 393.9219 172.5474 396.207 c172.5474 397.6582 173.0684 398.877 174.1118 399.8652 c175.1548 400.8555 176.5112 401.3496 178.1792 401.3496 c179.9795 401.3496 181.5171 400.9316 182.7905 400.0957 c181.8037 397.7559 L180.9922 398.418 180.0488 398.748 178.9746 398.748 c178.1846 398.748 177.5645 398.5234 177.1157 398.0723 c176.666 397.623 176.4409 397.0664 176.4409 396.4082 c176.4409 395.2441 177.3188 394.3105 179.0757 393.6074 c181.9077 392.4648 183.3237 390.7188 183.3237 388.3691 cf*U*u212.9946 383.2539 m208.3022 383.2539 L206.4038 389.5938 L198.4512 389.5938 L196.481 383.2539 L192.397 383.2539 L200.5649 407.9082 L204.8628 407.9082 l212.9946 383.2539 Lf1 D205.7583 392.2441 m203.2148 400.9258 L202.8569 402.1465 202.6426 403.1387 202.5703 403.9043 c202.499 403.9043 L202.3794 403.2578 202.1519 402.2676 201.8184 400.9258 c199.167 392.2441 l205.7583 392.2441 Lf*U*u0 D229.5376 383.2539 m225.5151 383.2539 L225.5151 395.8457 L225.5151 397.8242 224.4507 398.8125 222.3208 398.8125 c221.3101 398.8125 220.3882 398.6484 219.5532 398.3184 c219.5532 383.2539 L215.5313 383.2539 L215.5313 400.0645 L217.3545 400.9199 219.6719 401.3496 222.4849 401.3496 c224.9673 401.3496 226.8032 400.8008 227.9897 399.7031 c229.022 398.7773 229.5376 397.5156 229.5376 395.9102 c229.5376 383.2539 Lf*U*u247.6694 384.2168 m246.1309 383.3594 244.0635 382.9316 241.4707 382.9316 c238.854 382.9316 236.8203 383.7207 235.3691 385.3047 c233.918 386.8848 233.1929 389.0938 233.1929 391.9277 c233.1929 394.7832 233.918 397.0566 235.3691 398.75 c236.7769 400.375 238.6455 401.1895 240.9756 401.1895 c242.0083 401.1895 242.8989 401.0762 243.647 400.8535 c243.647 408.0449 L247.6694 408.0449 l247.6694 384.2168 Lf1 D243.647 385.8945 m243.647 398.6797 L243.1196 398.834 242.5254 398.9102 241.8662 398.9102 c238.7441 398.9102 237.1836 396.6582 237.1836 392.1563 c237.1836 387.7188 238.6455 385.5 241.5693 385.5 c242.5361 385.5 243.2285 385.6309 243.647 385.8945 cf*U*u0 D265.9741 392.252 m255.0952 390.6699 L255.4248 387.375 257.04 385.7266 259.9399 385.7266 c261.6538 385.7266 263.1479 386.0566 264.4229 386.7148 c265.3784 384.1816 L263.8623 383.3477 261.9067 382.9316 259.5117 382.9316 c256.9624 382.9316 254.9521 383.7324 253.4795 385.3359 c252.0073 386.9395 251.272 389.2246 251.272 392.1895 c251.272 395.0664 251.9473 397.3125 253.2988 398.9277 c254.6504 400.541 256.5015 401.3496 258.853 401.3496 c261.2275 401.3496 263.0298 400.5742 264.2598 399.0254 c265.4907 397.4766 266.0625 395.2188 265.9741 392.252 cf1 D262.21 393.834 m262.21 397.1953 261.0449 398.8789 258.7148 398.8789 c257.4849 398.8789 256.54 398.3828 255.8804 397.3945 c255.1553 396.3164 254.8149 394.7559 254.8579 392.7129 c262.21 393.834 Lf*U*u0 D279.7959 388.3691 m279.7959 386.875 279.2129 385.5996 278.0479 384.5449 c276.8823 383.4922 275.355 382.9629 273.4644 382.9629 c271.4424 382.9629 269.8037 383.3906 268.5498 384.2461 c269.6055 386.8145 L270.4634 386.1309 271.5742 385.791 272.9375 385.791 c273.7515 385.791 274.4111 386.0273 274.9165 386.5 c275.4224 386.9727 275.6748 387.5703 275.6748 388.2969 c275.6748 389.043 275.4775 389.6309 275.0825 390.0586 c274.687 390.4883 274.0171 390.8789 273.0728 391.2305 c270.3706 392.2617 269.0186 393.9219 269.0186 396.207 c269.0186 397.6582 269.5405 398.877 270.5835 399.8652 c271.627 400.8555 272.9829 401.3496 274.6514 401.3496 c276.4521 401.3496 277.9893 400.9316 279.2617 400.0957 c278.2749 397.7559 L277.4634 398.418 276.5205 398.748 275.4463 398.748 c274.6567 398.748 274.0371 398.5234 273.5869 398.0723 c273.1372 397.623 272.9131 397.0664 272.9131 396.4082 c272.9131 395.2441 273.7915 394.3105 275.5474 393.6074 c278.3794 392.4648 279.7959 390.7188 279.7959 388.3691 cf*UUu*u168.1777 413.4531 m165.6167 413.4531 L165.6167 421.4863 L165.6167 422.75 164.9365 423.3809 163.5767 423.3809 c162.9321 423.3809 162.3428 423.2754 161.8096 423.0645 c161.8096 413.4531 L159.2495 413.4531 L159.2495 424.1758 L160.4116 424.7227 161.8896 424.9961 163.6816 424.9961 c165.2642 424.9961 166.4341 424.6445 167.1895 423.9453 c167.8481 423.3574 168.1777 422.5508 168.1777 421.5254 c168.1777 413.4531 Lf*U*u173.6997 428.0137 m173.6997 427.6621 173.5635 427.3633 173.2896 427.1172 c173.0161 426.8711 172.6831 426.748 172.2905 426.748 c171.8979 426.748 171.5649 426.8711 171.291 427.1172 c171.0181 427.3633 170.8809 427.6621 170.8809 428.0137 c170.8809 428.3633 171.0181 428.6641 171.291 428.918 c171.5649 429.168 171.8979 429.2969 172.2905 429.2969 c172.6831 429.2969 173.0161 429.1738 173.2896 428.9277 c173.5635 428.6816 173.6997 428.377 173.6997 428.0137 cf173.5649 413.4531 m171.0044 413.4531 L171.0044 424.791 L173.5649 424.791 l173.5649 413.4531 Lf*U*u185.2402 424.791 m181.6016 413.4531 L179.1626 413.4531 L175.46 424.791 L178.1948 424.791 L180.1929 417.4727 L180.3472 416.9258 180.4375 416.4063 180.4663 415.918 c180.5078 415.918 L180.5781 416.3242 180.6763 416.8438 180.8022 417.4727 c182.8428 424.791 l185.2402 424.791 Lf*U*u195.9824 419.1992 m189.0425 418.1914 L189.2529 416.0898 190.2842 415.041 192.1338 415.041 c193.228 415.041 194.1807 415.248 194.9956 415.6602 c195.605 414.0449 L194.6372 413.5117 193.3896 413.2461 191.8613 413.2461 c190.2339 413.2461 188.9512 413.7578 188.0117 414.7813 c187.0718 415.8047 186.6025 417.2617 186.6025 419.1523 c186.6025 420.9902 187.0337 422.4219 187.896 423.4512 c188.7583 424.4805 189.9395 424.9961 191.4399 424.9961 c192.9531 424.9961 194.1035 424.502 194.8892 423.5156 c195.6738 422.5273 196.0386 421.0898 195.9824 419.1992 cf1 D193.5869 420.2031 m193.5869 422.3496 192.8423 423.4219 191.354 423.4219 c190.5679 423.4219 189.9639 423.1055 189.542 422.4746 c189.0791 421.7891 188.8613 420.791 188.8896 419.4883 c193.5869 420.2031 Lf*U*u0 D203.7769 424.9824 m203.271 423.1074 L202.8921 423.2324 202.498 423.2949 202.0908 423.2949 c201.6001 423.2949 201.1919 423.2051 200.8687 423.0215 c200.8687 413.4531 L198.3086 413.4531 L198.3086 424.1836 l199.5562 424.7852 201.3794 425.0527 203.7769 424.9824 cf*U*u211.9502 416.7109 m211.9502 415.7578 211.5796 414.9434 210.8354 414.2715 c210.0913 413.5957 209.1167 413.2598 207.9111 413.2598 c206.6201 413.2598 205.5747 413.5352 204.7754 414.082 c205.4487 415.7227 L205.9951 415.2871 206.7036 415.0684 207.5747 415.0684 c208.0933 415.0684 208.5142 415.2188 208.8374 415.5215 c209.1597 415.8203 209.3213 416.2031 209.3213 416.668 c209.3213 417.1426 209.1943 417.5195 208.9438 417.793 c208.6904 418.0645 208.2637 418.3145 207.6606 418.5391 c205.938 419.1973 205.0762 420.2559 205.0762 421.7148 c205.0762 422.6406 205.4082 423.418 206.0742 424.0508 c206.7397 424.6816 207.604 424.9961 208.6689 424.9961 c209.8179 424.9961 210.7983 424.7305 211.6108 424.1992 c210.9795 422.707 L210.4619 423.1289 209.8594 423.3398 209.1738 423.3398 c208.6685 423.3398 208.2725 423.1953 207.9858 422.9082 c207.6987 422.6191 207.5552 422.2656 207.5552 421.8438 c207.5552 421.1016 208.1152 420.5059 209.2378 420.0586 c211.0459 419.3262 211.9502 418.2129 211.9502 416.7109 cf*U*u216.9658 428.0137 m216.9658 427.6621 216.8286 427.3633 216.5557 427.1172 c216.2827 426.8711 215.9492 426.748 215.5571 426.748 c215.1646 426.748 214.832 426.8711 214.5571 427.1172 c214.2847 427.3633 214.147 427.6621 214.147 428.0137 c214.147 428.3633 214.2847 428.6641 214.5571 428.918 c214.832 429.168 215.1646 429.2969 215.5571 429.2969 c215.9492 429.2969 216.2827 429.1738 216.5557 428.9277 c216.8286 428.6816 216.9658 428.377 216.9658 428.0137 cf216.832 413.4531 m214.271 413.4531 L214.271 424.791 L216.832 424.791 l216.832 413.4531 Lf*U*u228.4766 414.0664 m227.4956 413.5195 226.1782 413.2461 224.5234 413.2461 c222.8564 413.2461 221.5596 413.752 220.6338 414.7617 c219.709 415.7715 219.2466 417.1797 219.2466 418.9902 c219.2466 420.8125 219.71 422.2656 220.6353 423.3438 c221.5327 424.3809 222.7251 424.9004 224.2114 424.9004 c224.8706 424.9004 225.439 424.8281 225.9155 424.6836 c225.9155 429.2617 L228.4766 429.2617 l228.4766 414.0664 Lf1 D225.9155 415.1426 m225.9155 423.3008 L225.5796 423.3984 225.2017 423.4492 224.7803 423.4492 c222.7891 423.4492 221.7939 422.0117 221.7939 419.1367 c221.7939 416.3066 222.7261 414.8906 224.5908 414.8906 c225.208 414.8906 225.6499 414.9746 225.9155 415.1426 cf*U*u0 D239.3936 414.0664 m238.3711 413.5195 237.0049 413.2461 235.2944 413.2461 c232.2119 413.2461 230.6709 414.3945 230.6709 416.6934 c230.6709 418.0645 231.2944 419.0938 232.542 419.7813 c233.5225 420.3125 235.0073 420.6777 236.998 420.873 c236.998 421.4824 L236.998 422.7305 236.2471 423.3516 234.7485 423.3516 c233.8096 423.3516 232.8647 423.123 231.9111 422.6641 c231.3228 424.1348 L232.4995 424.709 233.7959 424.9961 235.2114 424.9961 c238 424.9961 239.3936 423.6914 239.3936 421.0859 c239.3936 414.0664 Lf1 D236.998 414.9863 m236.998 419.6563 L235.6543 419.4883 234.7036 419.2305 234.1436 418.8789 c233.4448 418.4434 233.0942 417.7422 233.0942 416.7734 c233.0942 415.373 233.8848 414.6699 235.4648 414.6699 c236.0669 414.6699 236.5771 414.7754 236.998 414.9863 cf*U*u0 D250.9399 414.0664 m249.959 413.5195 248.6411 413.2461 246.9873 413.2461 c245.3193 413.2461 244.0239 413.752 243.0977 414.7617 c242.1729 415.7715 241.7104 417.1797 241.7104 418.9902 c241.7104 420.8125 242.1733 422.2656 243.0991 423.3438 c243.9966 424.3809 245.1885 424.9004 246.6758 424.9004 c247.335 424.9004 247.9028 424.8281 248.3794 424.6836 c248.3794 429.2617 L250.9399 429.2617 l250.9399 414.0664 Lf1 D248.3794 415.1426 m248.3794 423.3008 L248.043 423.3984 247.6641 423.4492 247.2441 423.4492 c245.2529 423.4492 244.2578 422.0117 244.2578 419.1367 c244.2578 416.3066 245.1899 414.8906 247.0557 414.8906 c247.6714 414.8906 248.1133 414.9746 248.3794 415.1426 cf*UU*u0 D146.9238 429.2363 m149.6514 429.2363 L149.6514 417.0469 L149.6514 415.707 150.373 415.0352 151.8169 415.0352 c152.502 415.0352 153.1274 415.1484 153.6924 415.3711 c153.6924 429.2363 L156.4199 429.2363 L156.4199 414.1875 L155.1836 413.6074 153.6123 413.3164 151.7051 413.3164 c150.0225 413.3164 148.7783 413.6895 147.9736 414.4336 c147.2744 415.0586 146.9238 415.916 146.9238 417.0039 c146.9238 429.2363 Lf*UUu*u152.4575 368.2959 m149.3252 368.2959 L149.3252 365.1494 L152.1108 365.1494 L152.1108 363.8887 L149.3252 363.8887 L149.3252 359.1904 L147.4126 359.1904 L147.4126 369.5703 L152.4575 369.5703 l152.4575 368.2959 Lf*U*u159.0815 359.5928 m158.4072 359.2324 157.5063 359.0518 156.3794 359.0518 c154.3467 359.0518 153.3301 359.8096 153.3301 361.3242 c153.3301 362.2949 153.8154 363.0107 154.7856 363.4727 c155.3857 363.7588 156.291 363.9619 157.502 364.083 c157.502 364.4844 L157.502 365.3066 157.0073 365.7178 156.019 365.7178 c155.3999 365.7178 154.7759 365.5654 154.1479 365.2607 c153.7598 366.2305 L154.5361 366.6094 155.3906 366.7988 156.3237 366.7988 c158.1621 366.7988 159.0815 365.9395 159.0815 364.2207 c159.0815 359.5928 Lf1 D157.502 360.2021 m157.502 363.2783 L156.6748 363.1768 156.0898 363.0342 155.7461 362.8496 c155.189 362.5537 154.9102 362.0635 154.9102 361.3799 c154.9102 360.4561 155.4351 359.9941 156.4844 359.9941 c156.8838 359.9941 157.2231 360.0635 157.502 360.2021 cf*U*u0 D165.3042 359.5645 m164.9253 359.2227 164.3389 359.0518 163.5444 359.0518 c162.5464 359.0518 161.7842 359.4717 161.2578 360.3135 c160.814 361.0146 160.5923 361.8926 160.5923 362.9463 c160.5923 363.999 160.8188 364.8721 161.2715 365.5654 c161.7983 366.3877 162.5605 366.7988 163.5581 366.7988 c164.3066 366.7988 164.8838 366.6279 165.2905 366.2861 c164.9302 365.3301 L164.6621 365.5332 164.3296 365.6348 163.9321 365.6348 c162.8423 365.6348 162.2969 364.7451 162.2969 362.9668 c162.2969 362.2852 162.3984 361.709 162.6021 361.2393 c162.8789 360.5938 163.3135 360.2715 163.9048 360.2715 c164.311 360.2715 164.6484 360.3818 164.9165 360.6045 c165.3042 359.5645 Lf*U*u172.3999 359.6338 m171.6514 359.2363 170.6953 359.0381 169.5313 359.0381 c167.6001 359.0381 166.6348 359.8789 166.6348 361.5605 c166.6348 366.6602 L168.3394 366.6602 L168.3394 361.4629 L168.3394 360.6221 168.7549 360.2021 169.5859 360.2021 c170.042 360.2021 170.4121 360.2852 170.6953 360.4512 c170.6953 366.6602 L172.3999 366.6602 l172.3999 359.6338 Lf*U*u175.9756 359.1904 m174.271 359.1904 L174.271 369.6816 L175.9756 369.6816 l175.9756 359.1904 Lf*U*u181.1724 359.2598 m180.9507 359.1582 180.6641 359.1074 180.313 359.1074 c179.6758 359.1074 179.1743 359.2852 178.8096 359.6406 c178.4443 359.9961 178.2622 360.4932 178.2622 361.1309 c178.2622 365.5791 L177.4307 365.5791 L177.4307 366.6602 L178.2622 366.6602 L178.2622 369.1553 L179.9668 369.626 L179.9668 366.6602 L181.1724 366.6602 L181.1724 365.5791 L179.9668 365.5791 L179.9668 361.2139 L179.9668 360.5674 180.2363 360.2441 180.7749 360.2441 c180.8848 360.2441 181.0171 360.2666 181.1724 360.3135 c181.1724 359.2598 Lf*U*u187.9907 359.5928 m187.3164 359.2324 186.4155 359.0518 185.2886 359.0518 c183.2559 359.0518 182.2393 359.8096 182.2393 361.3242 c182.2393 362.2949 182.7246 363.0107 183.6948 363.4727 c184.2949 363.7588 185.2002 363.9619 186.4111 364.083 c186.4111 364.4844 L186.4111 365.3066 185.9165 365.7178 184.9282 365.7178 c184.3091 365.7178 183.6851 365.5654 183.0571 365.2607 c182.6689 366.2305 L183.4453 366.6094 184.2998 366.7988 185.2329 366.7988 c187.0713 366.7988 187.9907 365.9395 187.9907 364.2207 c187.9907 359.5928 Lf1 D186.4111 360.2021 m186.4111 363.2783 L185.584 363.1768 184.999 363.0342 184.6553 362.8496 c184.0981 362.5537 183.8193 362.0635 183.8193 361.3799 c183.8193 360.4561 184.3442 359.9941 185.3936 359.9941 c185.793 359.9941 186.1323 360.0635 186.4111 360.2021 cf*U*u0 D195.5439 359.6484 m194.897 359.2881 194.0288 359.1074 192.9385 359.1074 c191.793 359.1074 190.9199 359.459 190.3193 360.1621 c189.7461 360.8291 189.46 361.7402 189.46 362.8975 c189.46 364.0078 189.7227 364.915 190.2476 365.6191 c190.8276 366.4053 191.6519 366.7988 192.7202 366.7988 c193.1533 366.7988 193.5264 366.7529 193.8394 366.6602 c193.8394 369.7373 L195.5439 369.7373 l195.5439 359.6484 Lf1 D193.8394 360.3555 m193.8394 365.7451 L193.6187 365.8105 193.3706 365.8428 193.0947 365.8428 c191.7896 365.8428 191.1367 364.8936 191.1367 362.9951 c191.1367 361.124 191.748 360.1885 192.9707 360.1885 c193.375 360.1885 193.6646 360.2441 193.8394 360.3555 cf*U*u0 D206.9219 359.6484 m206.2749 359.2881 205.4067 359.1074 204.3164 359.1074 c203.1709 359.1074 202.2979 359.459 201.6973 360.1621 c201.124 360.8291 200.8379 361.7402 200.8379 362.8975 c200.8379 364.0078 201.1006 364.915 201.6255 365.6191 c202.2056 366.4053 203.0298 366.7988 204.0981 366.7988 c204.5313 366.7988 204.9043 366.7529 205.2173 366.6602 c205.2173 369.7373 L206.9219 369.7373 l206.9219 359.6484 Lf1 D205.2173 360.3555 m205.2173 365.7451 L204.9966 365.8105 204.7485 365.8428 204.4727 365.8428 c203.1675 365.8428 202.5146 364.8936 202.5146 362.9951 c202.5146 361.124 203.126 360.1885 204.3486 360.1885 c204.7529 360.1885 205.0425 360.2441 205.2173 360.3555 cf*U*u0 D214.6694 362.9688 m210.0947 362.3135 L210.2334 360.915 210.9126 360.2158 212.1323 360.2158 c212.853 360.2158 213.4814 360.3594 214.0176 360.6455 c214.4194 359.5781 L213.7817 359.2275 212.9595 359.0518 211.9526 359.0518 c210.8066 359.0518 209.9292 359.4209 209.3193 360.1602 c208.7651 360.8438 208.4878 361.7725 208.4878 362.9463 c208.4878 364.0635 208.7324 364.96 209.2227 365.6348 c209.7769 366.4111 210.5947 366.7988 211.6758 366.7988 c212.7754 366.7988 213.5747 366.4199 214.0737 365.6611 c214.5078 365.0039 214.7065 364.1064 214.6694 362.9688 cf1 D213.0889 363.6387 m213.0889 365.0615 212.5991 365.7734 211.6201 365.7734 c210.9917 365.7734 210.5435 365.4756 210.2759 364.8818 c210.0723 364.4355 209.98 363.8643 209.9985 363.168 c213.0889 363.6387 Lf*U*u0 D221.9443 359.1904 m220.0044 359.1904 L220.0044 369.626 L221.9443 369.626 l221.9443 359.1904 Lf*U*u229.6641 359.1904 m227.959 359.1904 L227.959 364.4844 L227.959 365.3164 227.5161 365.7314 226.6299 365.7314 c226.2095 365.7314 225.8257 365.6621 225.4785 365.5234 c225.4785 359.1904 L223.7739 359.1904 L223.7739 366.2588 L224.5405 366.6191 225.5151 366.7988 226.6982 366.7988 c227.5479 366.7988 228.2271 366.6367 228.7354 366.3135 c229.354 365.916 229.6641 365.3164 229.6641 364.5117 c229.6641 359.1904 Lf*U*u237.2446 359.0791 m237.2446 358.1094 236.9761 357.3633 236.4404 356.8418 c235.9048 356.3193 235.1519 356.0586 234.1816 356.0586 c233.0728 356.0586 232.2227 356.2344 231.6313 356.585 c232.1025 357.6934 L232.6387 357.3984 233.2344 357.25 233.8906 357.25 c235.0361 357.25 235.6089 357.8096 235.6089 358.9268 c235.6089 359.3984 L235.2856 359.2041 234.8193 359.1074 234.2095 359.1074 c233.2207 359.1074 232.4585 359.4824 231.9229 360.2314 c231.4419 360.8887 231.2021 361.7314 231.2021 362.7588 c231.2021 363.9893 231.4932 364.957 232.0752 365.6602 c232.7031 366.4189 233.6182 366.7988 234.8193 366.7988 c235.8813 366.7988 236.6899 366.6191 237.2446 366.2588 c237.2446 359.0791 Lf1 D235.6089 360.3271 m235.6089 365.6348 L235.415 365.7451 235.124 365.8008 234.7358 365.8008 c233.4976 365.8008 232.8789 364.8145 232.8789 362.8418 c232.8789 361.0078 233.4702 360.0908 234.6528 360.0908 c235.022 360.0908 235.3408 360.1699 235.6089 360.3271 cf*U*u0 D244.9365 362.9688 m240.3618 362.3135 L240.5005 360.915 241.1797 360.2158 242.3994 360.2158 c243.1201 360.2158 243.7485 360.3594 244.2847 360.6455 c244.6865 359.5781 L244.0488 359.2275 243.2266 359.0518 242.2197 359.0518 c241.0737 359.0518 240.1963 359.4209 239.5864 360.1602 c239.0322 360.8438 238.7549 361.7725 238.7549 362.9463 c238.7549 364.0635 238.9995 364.96 239.4897 365.6348 c240.0439 366.4111 240.8618 366.7988 241.9429 366.7988 c243.0425 366.7988 243.8418 366.4199 244.3408 365.6611 c244.7749 365.0039 244.9736 364.1064 244.9365 362.9688 cf1 D243.356 363.6387 m243.356 365.0615 242.8662 365.7734 241.8872 365.7734 c241.2588 365.7734 240.8105 365.4756 240.543 364.8818 c240.3394 364.4355 240.2471 363.8643 240.2656 363.168 c243.356 363.6387 Lf*U*u0 D252.3643 359.1904 m250.6592 359.1904 L250.6592 364.4844 L250.6592 365.3164 250.2163 365.7314 249.3301 365.7314 c248.9097 365.7314 248.5259 365.6621 248.1787 365.5234 c248.1787 359.1904 L246.4741 359.1904 L246.4741 366.2588 L247.2407 366.6191 248.2153 366.7988 249.3984 366.7988 c250.248 366.7988 250.9272 366.6367 251.4355 366.3135 c252.0542 365.916 252.3643 365.3164 252.3643 364.5117 c252.3643 359.1904 Lf*U*u255.9946 368.7803 m255.9946 368.54 255.9023 368.3418 255.7178 368.1846 c255.5327 368.0273 255.3159 367.9492 255.0664 367.9492 c254.8169 367.9492 254.5996 368.0273 254.415 368.1846 c254.23 368.3418 254.1377 368.54 254.1377 368.7803 c254.1377 369.0205 254.23 369.2217 254.415 369.3838 c254.5996 369.5449 254.8169 369.626 255.0664 369.626 c255.3159 369.626 255.5327 369.5479 255.7178 369.3906 c255.9023 369.2334 255.9946 369.0303 255.9946 368.7803 cf255.9116 359.1904 m254.207 359.1904 L254.207 366.6602 L255.9116 366.6602 l255.9116 359.1904 Lf*U*u263.6729 362.9688 m259.0981 362.3135 L259.2368 360.915 259.916 360.2158 261.1357 360.2158 c261.8564 360.2158 262.4849 360.3594 263.021 360.6455 c263.4229 359.5781 L262.7852 359.2275 261.9629 359.0518 260.9561 359.0518 c259.8101 359.0518 258.9326 359.4209 258.3228 360.1602 c257.7686 360.8438 257.4912 361.7725 257.4912 362.9463 c257.4912 364.0635 257.7358 364.96 258.2261 365.6348 c258.7803 366.4111 259.5981 366.7988 260.6792 366.7988 c261.7788 366.7988 262.5781 366.4199 263.0771 365.6611 c263.5112 365.0039 263.71 364.1064 263.6729 362.9688 cf1 D262.0923 363.6387 m262.0923 365.0615 261.6025 365.7734 260.6235 365.7734 c259.9951 365.7734 259.5469 365.4756 259.2793 364.8818 c259.0757 364.4355 258.9834 363.8643 259.002 363.168 c262.0923 363.6387 Lf*U*u0 D268.8135 366.7852 m268.4834 365.5518 L268.2358 365.6348 267.979 365.6768 267.7129 365.6768 c267.3921 365.6768 267.126 365.6162 266.915 365.4961 c266.915 359.1904 L265.2104 359.1904 L265.2104 366.2588 l266.0327 366.6553 267.2339 366.8311 268.8135 366.7852 cf*U*u272.5972 369.3623 m270.9063 367.4502 L269.9775 367.4502 L270.9341 369.4043 L271.2202 369.5703 271.5439 369.6533 271.9043 369.6533 c272.2827 369.6533 272.5137 369.5566 272.5972 369.3623 cf271.6821 359.1904 m269.9775 359.1904 L269.9775 366.6602 L271.6821 366.6602 l271.6821 359.1904 Lf*U*u278.9302 359.5928 m278.2559 359.2324 277.355 359.0518 276.228 359.0518 c274.1953 359.0518 273.1787 359.8096 273.1787 361.3242 c273.1787 362.2949 273.6641 363.0107 274.6343 363.4727 c275.2344 363.7588 276.1396 363.9619 277.3506 364.083 c277.3506 364.4844 L277.3506 365.3066 276.856 365.7178 275.8677 365.7178 c275.2485 365.7178 274.6245 365.5654 273.9966 365.2607 c273.6084 366.2305 L274.3848 366.6094 275.2393 366.7988 276.1724 366.7988 c278.0107 366.7988 278.9302 365.9395 278.9302 364.2207 c278.9302 359.5928 Lf1 D277.3506 360.2021 m277.3506 363.2783 L276.5234 363.1768 275.9385 363.0342 275.5947 362.8496 c275.0376 362.5537 274.7588 362.0635 274.7588 361.3799 c274.7588 360.4561 275.2837 359.9941 276.333 359.9941 c276.7324 359.9941 277.0718 360.0635 277.3506 360.2021 cf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF